<?php





function inbode_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {


  switch ($op) {


    case 'insert':

			// a new unit was created, create it in the fusion table too baby!
			// we only created entries in the fusion table if we add unit info
			if ($node->type=="unit") {
				// get some info on the building			
				$buildinginfo = inbode_get_building_info($node->field_unit_building[0]['nid']);
				// setup the building and unit array
				$data=array();
				$data["node"]=(array) $node;
				$data["building"]=$buildinginfo[0];
				// add the mofo to fusion, get the unique ROWID back
				$rowid = inbode_fusion_insert_unit($data);				
				if ( !inbode_update_rowid( $node->nid, $rowid ) ) {
					watchdog('inbode', 'Inserted new unit '.$node->nid.' but failed to insert ROWID'.$rowid );
					drupal_set_message('Your unit was added, but with an error. Please <a href="/node/'.$node->nid.'/edit">re-save your unit data</a>.', 'error');
				} else {
					watchdog('inbode', 'Inserted new unit '.$node->nid.' with ROWID '.$rowid );
					drupal_set_message('Your unit was added to Inbode.', 'status');
				};
			}
			
			break;
			

    case 'delete':
    
    	// delete a row in the fusion table
			if ($node->type=="unit") {
				$rowid = $node->field_featureid[0]["value"];
				if (!inbode_fusion_delete_unit($rowid)) {
					drupal_set_message('Deleted your unit with Inbode.', 'status');
				} else {
					drupal_set_message('There was a problem deleting your unit with Inbode.', 'error');				
				}
			}

      break;



    case 'update':
    
    	// we just <3 google fusion tables!
    	// how slick are sql queries via http with spatial tied to it? awesome!
			
			// unit
			if ($node->type=="unit") {
	
				// let's update the unit please! (includes building data that is current.)
				// unique rowid in fusion to update
				$rowid = $node->field_featureid[0]["value"];
				// get some info on the building			
				$buildinginfo = inbode_get_building_info($node->field_unit_building[0]['nid']);
				// setup the building and unit array
				$data=array();
				$data["node"]=(array) $node;
				$data["building"]=$buildinginfo[0];
				$result = inbode_fusion_update_unit($rowid, $data);				
				
				if ( !$result )  {
					watchdog('inbode', 'Fusion table error updating unit '.$node->nid.' with ROWID '.$rowid. ' and data '.serialize($data) );
					drupal_set_message('Oops, there was an error updating Inbode. Please try again later.', 'error');
				} else {
					watchdog('inbode', 'Updated fusion table unit '.$node->nid.' with a ROWID '.$rowid );
					drupal_set_message('Your unit was updated on Inbode.', 'status');
				};				


			}
			
			// building
			if ($node->type=="building") {
	
				// let's update the building please!
				// no unique rowid in fusion to update, there's a slew of them potentially

				// get some info on the building			
				$buildingid = $node->nid;
				$buildinginfo = inbode_get_building_info($buildingid);
				// do the update
				$result = inbode_fusion_update_building($buildingid, $buildinginfo);				
				
				if ( !$result )  {
					watchdog('inbode', 'Fusion table error updating building '.$buildingid.' with data '.serialize($buildinginfo) );
					drupal_set_message('Oops, there was an error updating Inbode. Please try again later.', 'error');
				} else {
					watchdog('inbode', 'Updated fusion table building id '.$node->nid);
					drupal_set_message('Your unit was updated on Inbode.', 'status');
				};				


			}

      break;



  }

}


// update all building data in the google fusion table for this building id
function inbode_fusion_update_building($id, $data) {
	
	global $conf;	
	$tableid = $conf['i_InbodeBeta-BuildingsUnits'];
	
	if (!isset($id) || !is_numeric($id)) {
		return 0;
	}
	
	// get all ROWIDs from fusion that we must update
	$rowsql = "SELECT ROWID FROM $tableid WHERE 'building_id'='$id'";
	$rowids = inbode_fusionquery($rowsql);
	
	if (isset($rowids['column_data'])) {
		$rowdata = $rowids['column_data'];
	} else {
		return 0;
	}
		

	// build  SQL like update query to be executed with the fusion table
	$sql  = "UPDATE $tableid SET ";

	$sql .= "'latlng'='".$data[0]['latitude'].",".$data[0]['longitude']."', ";
	$sql .= "'building_name'='".addcslashes($data[0]['title'], "'")."', ";
	$sql .= "'building_description'='".addcslashes($data[0]['field_building_description_value'], "'")."', ";
	$sql .= "'street'='".addcslashes($data[0]['street'], "'")."', ";
	$sql .= "'street2'='".addcslashes($data[0]['additional'], "'")."', ";
	$sql .= "'city'='".addcslashes($data[0]['city'], "'")."', ";
	$sql .= "'province'='".addcslashes($data[0]['province'], "'")."', ";
	$sql .= "'postal_code'='".addcslashes($data[0]['postal_code'], "'")."', ";
	$sql .= "'country'='".addcslashes($data[0]['country'], "'")."', ";
	$sql .= "'building_am_cats'='";
	if ($data[0]['building_am_cats']) { $sql .= "1"; } else { $sql .= "0";	};
	$sql .= "', ";
	$sql .= "'building_am_dogs_small'='";
	if ($data[0]['building_am_dogs_small']) { $sql .= "1"; } else { $sql .= "0";	};
	$sql .= "', ";
	$sql .= "'building_am_dogs_large'='";
	if ($data[0]['building_am_dogs_large']) { $sql .= "1"; } else { $sql .= "0";	};
	$sql .= "', ";
	$sql .= "'building_am_pool'='";
	if ($data[0]['building_am_pool']) { $sql .= "1"; } else { $sql .= "0";	};
	$sql .= "' ";
	$sql .= " WHERE ROWID=";

/*

	hope to bring images here too

	$sql .= "'building_image_1'='', ";
	$sql .= "'building_image_2'='', ";
	$sql .= "'building_image_3'='', ";
	$sql .= "'building_image_4'='', ";
*/



	// update google fusion now please!
	if (isset($id) && is_numeric($id)) {
		
		// results
		$result=array();
		
		foreach($rowdata as $rowid) {		
			$result[] = inbode_fusionquery($sql."'".$rowid['rowid']."'" );		
		}		
		
		foreach($result as $r) {
			if ($r['info']['http_code']==200 && $r['info']['content_type']=='text/plain' && isset($r['response'])) {
				// yay we're good
			} else {
				watchdog('inbode', 'Error updating all buildings with building_id '.$id. ' and data ['.$result.']');
				return 0;
			}			
		}

		return 1;

	} else {
		return 0;
	}



}


// update unit data in google fustion tables
function inbode_fusion_update_unit( $rowid, $data ) {

	global $conf;	
	$tableid = $conf['i_InbodeBeta-BuildingsUnits'];

	// build  SQL like update query to be executed with the fusion table
	$sql  = "UPDATE $tableid SET ";
	
	$sql .= "'building_id'='".$data['building']['nid']."', ";
	$sql .= "'latlng'='".$data['building']['latitude'].",".$data['building']['longitude']."', ";
	$sql .= "'building_name'='".addcslashes($data['building']['title'], "'")."', ";
	$sql .= "'building_description'='".addcslashes($data['building']['field_building_description_value'], "'")."', ";
	$sql .= "'street'='".addcslashes($data['building']['street'], "'")."', ";
	$sql .= "'street2'='".addcslashes($data['building']['additional'], "'")."', ";
	$sql .= "'city'='".addcslashes($data['building']['city'], "'")."', ";
	$sql .= "'province'='".addcslashes($data['building']['province'], "'")."', ";
	$sql .= "'postal_code'='".addcslashes($data['building']['postal_code'], "'")."', ";
	$sql .= "'country'='".addcslashes($data['building']['country'], "'")."', ";
	$sql .= "'building_am_cats'='";
	if ($data['building']['building_am_cats']) { $sql .= "1"; } else { $sql .= "0";	};
	$sql .= "', ";
	$sql .= "'building_am_dogs_small'='";
	if ($data['building']['building_am_dogs_small']) { $sql .= "1"; } else { $sql .= "0";	};
	$sql .= "', ";
	$sql .= "'building_am_dogs_large'='";
	if ($data['building']['building_am_dogs_large']) { $sql .= "1"; } else { $sql .= "0";	};
	$sql .= "', ";
	$sql .= "'building_am_pool'='";
	if ($data['building']['building_am_pool']) { $sql .= "1"; } else { $sql .= "0";	};
	$sql .= "', ";
	$sql .= "'building_image_1'='', ";
	$sql .= "'building_image_2'='', ";
	$sql .= "'building_image_3'='', ";
	$sql .= "'building_image_4'='', ";
	$sql .= "'unit_id'='".$data['node']['nid']."', ";
	$sql .= "'status'='".addcslashes($data['node']['field_unit_status'][0]['value'], "'")."', ";
	$sql .= "'unit_name'='".addcslashes($data['node']['title'], "'")."', ";
	$sql .= "'unit_description'='".addcslashes($data['node']['field_unit_description'][0]['value'], "'")."', ";
	$sql .= "'bedrooms'='".$data['node']['field_unit_bedroom'][0]['value']."', ";
	$sql .= "'bathrooms'='".$data['node']['field_unit_bathroom'][0]['value']."', ";
	$sql .= "'price'='".$data['node']['field_unit_price'][0]['amount']."', ";
	$sql .= "'currency'='".$data['node']['field_unit_price'][0]['currency']."', ";
	$sql .= "'area'='".$data['node']['field_unit_area'][0]['value']."', ";
	$sql .= "'available_date'='".$data['node']['field_unit_available'][0]['value']."', ";
	// amenities
	$unit_amenities = $data['node']['field_unit_amenities'];
	$uam = '';
	foreach($unit_amenities as $am) {
		switch ($am['value']) {
			default:
				$uam .= $am['value'].":";
				break;
		}
	}
	$sql .= "'unit_am_laundry'='";
	if ( stripos($uam,'in-unit-laundry')===false) { $sql .= "0"; } else { $sql .= "1";	};
	$sql .= "', ";
	$sql .= "'unit_am_dishwasher'='";
	if ( stripos($uam,'dishwasher')===false) { $sql .= "0"; } else { $sql .= "1";	};
	$sql .= "', ";
	$sql .= "'unit_am_disposal'='";
	if ( stripos($uam,'disposal')===false) { $sql .= "0"; } else { $sql .= "1";	};
	$sql .= "', ";
	$sql .= "'unit_am_balcony'='";
	if ( stripos($uam,'balcony')===false) { $sql .= "0"; } else { $sql .= "1";	};
	$sql .= "', ";
	
	// images
	$unit_images = $data['node']['field_unit_images'];
	$kk=0;
	foreach($unit_images as $ui) {
		if ($kk<8) {
			$nn=$kk+1;
			if ($kk!=7) {
				$sql .= "'unit_image_".$nn."'='".addcslashes($ui['filepath'], "'")."', ";
			} else {
				$sql .= "'unit_image_".$nn."'='".addcslashes($ui['filepath'], "'")."'";
			}
		}
		$kk++;
	}
	
	if ($kk<8) {
		for ($jj=$kk+1 ; $jj<=8 ; $jj++) {
			if ($jj==8) {
				$sql .= "'unit_image_". $jj ."'=''";		
			} else {
				$sql .= "'unit_image_". $jj ."'='', ";		
			}
		}
	}

	$sql .= " WHERE ROWID='$rowid'";

	// update google fusion now please!
	$result = inbode_fusionquery($sql);

	watchdog('inbode', 'Updating unit with ROWID '.$rowid. ' and sql ['.$sql.']');
		
	if ($result['info']['http_code']==200 && $result['info']['content_type']=='text/plain' && isset($result['response'])) {
		return 1;
	} else {
		return 0;
	}



}


// insert data, both building and unit, into the google fusion table
function inbode_fusion_insert_unit( $data ) {

	global $conf;	
	$tableid = $conf['i_InbodeBeta-BuildingsUnits'];

	// build an SQL like query to be executed with the fusion table
	$sql  = "INSERT INTO $tableid ('building_id','latlng','building_name','building_description','street','street2','city','province','postal_code','country','building_am_cats','building_am_dogs_small','building_am_dogs_large','building_am_pool','building_image_1','building_image_2','building_image_3','building_image_4','unit_id','status','unit_name','unit_description','bedrooms','bathrooms','price','currency','area','available_date','unit_am_laundry','unit_am_dishwasher','unit_am_disposal','unit_am_balcony','unit_image_1','unit_image_2','unit_image_3','unit_image_4','unit_image_5','unit_image_6','unit_image_7','unit_image_8') VALUES (";
	
	// building details
	$sql .= $data['building']['nid'].", ";
	$sql .= "'".$data['building']['latitude'].",".$data['building']['longitude']."', ";
	$sql .= "'".addcslashes($data['building']['title'], "'")."', ";
	$sql .= "'".addcslashes($data['building']['field_building_description_value'], "'")."', ";
	$sql .= "'".addcslashes($data['building']['street'], "'")."', ";
	$sql .= "'".addcslashes($data['building']['additional'], "'")."', ";
	$sql .= "'".addcslashes($data['building']['city'], "'")."', ";
	$sql .= "'".addcslashes($data['building']['province'], "'")."', ";
	$sql .= "'".addcslashes($data['building']['postal_code'], "'")."', ";
	$sql .= "'".addcslashes($data['building']['country'], "'")."', ";
	// amenities for building
	if ($data['building']['building_am_cats']) { $sql .= "1, "; } else { $sql .= "0, ";	};
	if ($data['building']['building_am_dogs_small']) { $sql .= "1, "; } else { $sql .= "0, ";	};
	if ($data['building']['building_am_dogs_large']) { $sql .= "1, "; } else { $sql .= "0, ";	};
	if ($data['building']['building_am_pool']) { $sql .= "1, "; } else { $sql .= "0, ";	};
	// building images
	$sql .= "'', ";
	$sql .= "'', ";
	$sql .= "'', ";
	$sql .= "'', ";
	// unit details	, unit_id
	$sql .= "'".$data['node']['nid']."', ";
	// status
	$sql .= "'".addcslashes($data['node']['field_unit_status'][0]['value'], "'")."', ";
	// unit_name (title)
	$sql .= "'".addcslashes($data['node']['title'], "'")."', ";
	// unit_description
	$sql .= "'".addcslashes($data['node']['field_unit_description'][0]['value'], "'")."', ";
	// bedrooms, baths, price, currency
	$sql .= "'".$data['node']['field_unit_bedroom'][0]['value']."', ";
	$sql .= "'".$data['node']['field_unit_bathroom'][0]['value']."', ";
	$sql .= "'".$data['node']['field_unit_price'][0]['amount']."', ";
	$sql .= "'".$data['node']['field_unit_price'][0]['currency']."', ";
	// area, date
	$sql .= "'".$data['node']['field_unit_area'][0]['value']."', ";
	$sql .= "'".$data['node']['field_unit_available'][0]['value']."', ";
	// unit amenities (unit_am_laundry,unit_am_dishwasher,unit_am_disposal,unit_am_balcony)
	$unit_amenities = $data['node']['field_unit_amenities'];
	$uam = '';
	foreach($unit_amenities as $am) {
		switch ($am['value']) {
			default:
				$uam .= $am['value'].":";
				break;
		}
	}
	if ( stripos($uam,'in-unit-laundry')===false) { $sql .= "0, "; } else { $sql .= "1, ";	};
	if ( stripos($uam,'dishwasher')===false) { $sql .= "0, "; } else { $sql .= "1, ";	};
	if ( stripos($uam,'disposal')===false) { $sql .= "0, "; } else { $sql .= "1, ";	};
	if ( stripos($uam,'balcony')===false) { $sql .= "0, "; } else { $sql .= "1, ";	};
	// images
	$unit_images = $data['node']['field_unit_images'];
	$kk=0;
	foreach($unit_images as $ui) {
		if ($kk<8) {
			if ($kk!=7) {
				$sql .= "'".addcslashes($ui['filepath'], "'")."', ";
			} else {
				$sql .= "'".addcslashes($ui['filepath'], "'")."'";
			}
		}
		$kk++;
	}
	
	if ($kk<8) {
		for ($jj=$kk+1 ; $jj<=8 ; $jj++) {
			if ($jj==8) {
				$sql .= "''";		
			} else {
				$sql .= "'', ";		
			}
		}
	}

	$sql .= ")";
	$result = inbode_fusionquery($sql);
	
	if ($result['info']['http_code']==200 && $result['info']['content_type']=='text/plain; charset=UTF-8' && isset($result['column_data'][1]['rowid'])) {
		return($result['column_data'][1]['rowid']);
	} else {
		return 0;
	}

}


// delete a unit (with building info) from the google fusion table
function inbode_fusion_delete_unit( $rowid ) {

	global $conf;
	$tableid = $conf['i_InbodeBeta-BuildingsUnits'];
	$sql = "DELETE FROM $tableid WHERE ROWID='$rowid'";
	$result = inbode_fusionquery($sql);
	if (isset($result['response'])) {
		if ($result['response']=='OK') {
			return 1;		
		} else {
			return 0;
		}
	} else {
		return 0;
	}

}


// get some building info
function inbode_get_building_info($bid) {

  $bsql = "SELECT n.nid, n.title, b.field_building_description_value, l.street, l.additional, l.city, l.province, l.postal_code, l.country, l.latitude, l.longitude, (SELECT field_building_amenities_value FROM content_field_building_amenities a WHERE a.nid=$bid AND a.field_building_amenities_value='cats') AS building_am_cats, (SELECT field_building_amenities_value FROM content_field_building_amenities a WHERE a.nid=$bid AND a.field_building_amenities_value='small-dogs') AS building_am_dogs_small, (SELECT field_building_amenities_value FROM content_field_building_amenities a WHERE a.nid=$bid AND a.field_building_amenities_value='big-dogs') AS building_am_dogs_large, (SELECT field_building_amenities_value FROM content_field_building_amenities a WHERE a.nid=$bid AND a.field_building_amenities_value='pool') AS building_am_pool FROM node n LEFT JOIN location_instance li ON li.nid=n.nid LEFT JOIN location l ON  li.lid=l.lid LEFT JOIN content_type_building b ON b.nid=n.nid WHERE n.nid=$bid ;";
  
  $bresource = db_query($bsql);
  $building = array();
  while ($brow = db_fetch_array($bresource)) $building[] = $brow;  
  
  return $building;  

}

// parse a csv string into an array
function inbode_str_getcsv($input, $delimiter=',', $enclosure='"', $escape=null, $eol=null) { 
  $temp=fopen("php://memory", "rw");
  fwrite($temp, $input);
  fseek($temp, 0);
  $r=fgetcsv($temp, 4096, $delimiter, $enclosure);
  fclose($temp);
  return $r;
} 


// perform a sql like query to google fusion tables
function inbode_fusionquery($query) {

	global $conf;

	$qurl = 'https://www.google.com/fusiontables/api/query';
	$token = $conf['i_GAtoken'];
	
  if(preg_match("/^select|^show tables|^describe/i", $query)) { 

		$url = $qurl."/?sql=".urlencode($query);
		$headers = array('Authorization: GoogleLogin auth='.$token);
  	$ret = inbode_request($url, 'GET', NULL, $headers);

	} else {
	
 	  $query = "sql=".urlencode($query);
		$headers = array( 
							      'Content-type: application/x-www-form-urlencoded', 
							      'Authorization: GoogleLogin auth='.$token,
										'Content-Length: '.strlen($query)
							    );
  	$ret = inbode_request($qurl, 'POST', $query, $headers);
	
	}

	// response array
	$ra = array();
	$ra['info'] = $ret['info'];
	
	if ($ret['info']['content_type']=='text/plain; charset=UTF-8' && $ret['info']['http_code']=='200') {

	  $response = $ret['response'];
	  // get the response into an array of lines (responses are always csv from google, tables of data)
		$lines = explode("\n", $response);
		
		// now loop thru each line, and create an array to return with a header row
		$records=count($lines);
		
		if ($records>1) {

			$i=0;

			foreach ($lines as $line) {
				$cols = inbode_str_getcsv($line);		
				if ($line) {
					// loop thru each of the cols, either header or data
					$k=0;
					foreach($cols as $col) {
						if ($i==0) {
							// first line of response are the column names
							$ra['column_name']['name'.$k] = $col;				
						} else {				
							// on to the data
							$ra['column_data'][$i][$ra['column_name']['name'.$k]] = $col;				
						}
						$k++;
					}				
					// increment			
					$i++;		
				}	
			}

			$ra['count'] = $i-1;
		
		} else {
		
			$ra['response'] = $ret['response'];
			$ra['count'] = 0;		
		
		}
	
	} else {
	
		$ra['response'] = $ret['response'];
		$ra['count'] = 0;		
	}

	return $ra;
  
}
	

// perform a managed curl request of any type
function inbode_request($uri = NULL, $type = 'GET', $params = NULL, $headers = NULL) {

	// when setting the $headers, set it explicitly
	// $headers = array('Content type: blah/blah');
	// not
	// $headers = array('Content type' => 'blah/blah');

	$return = array();

	if (!$uri) {
		$return['status'] = 'error';
		$return['message'] = 'No URI specified.';
		return $return;
	}
	
	$ch = curl_init($uri);
	curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $type);
	
	// if any headers are supplied
	if ($headers) {
		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers );
	}
	
	// if any post parameters are supplied
	if (($type=='POST' && isset($params)) || ($type=='PUT' && isset($params))) {
		curl_setopt($ch, CURLOPT_POSTFIELDS, $params );
	}

	// misc options		
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);		
	curl_setopt($ch, CURLINFO_HEADER_OUT, 0);

	
	// get the response
	$return['response'] = curl_exec($ch);	
		$return['info'] = curl_getinfo($ch);


	// check for curl errors
	if(curl_errno($ch)) {
		drupal_set_message('<p>There was an error: '. curl_error($ch). '</p>', 'error');
		watchdog('inbode', 'Error in '. $type .' request to '. $uri .' with headers ['. addslashes(serialize($headers)) .'] and params ['. addslashes(serialize($params)) .'] -- '. addslashes(curl_error($ch)));
 		// uh ohhh	
		$return['status'] = 'error';
		$return['message'] = curl_error($ch);
 		curl_close($ch);	
		return $return;
	}

	// destroy the curl session
		curl_close($ch);		

	// respond
	$return['status'] = 'ok';
	return $return;

}



// intercept the url menus
function inbode_menu() {
  $items = array();

		// user home
    $items['user/%user/inbode'] = array(
    'title' => 'Inbode',
    'page callback' => 'inbode_summary',
    'page arguments' => array(1),
    'access callback' => '_inbode_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    );
     
    return $items;
    
}


// permissions
function inbode_perm() {
  return array('view inbode summary');
}


// summary page
function inbode_summary($account) {

  // setup the output html
  $out  = "\n\n<div id=\"t7_summary\">";
  $out .= "<h2><a href=\"/node/add/building?destination=user/".$account->uid."/inbode\">+ Add Building</a></h2>";

  // get some unit data
  $props = array();
  $props = __inbode_get_properties( $account->uid );
  
  // no results means we have to add our first building so we show that funky image :)
  if ( !isset($props["buildings"][0]) ) {
    $out .= "<img src=\"/".path_to_theme()."/images/add-first-building.png\" border=\"0\" width=\"286\" height=\"137\" alt=\"Click here to add your first building\" hspace=\"90\" />";
  } else {

		// loop thru buildings  
    foreach( $props["buildings"] as $building ) {

      // building
      $out .= "\n\n<div class=\"building\">\n";
      $out .= "<a href=\"/node/".$building["nid"]."/edit?destination=user/".$account->uid."/inbode\">".$building["title"]."</a>";
      $out .= "";
      if (!$building["street"] || !$building["city"] || !$building["province"]) {
				// do nothing
      } else {
	      $out .= "  &mdash; ". $building["street"].", ".$building["city"].", ".$building["province"];      
      }
      $out .= "\n</div>";
      
      if ( $building["num_units"]>0 ) {
      
	      // loop thru only the associated units
	      foreach( $props["units"] as $unit ) {
	      
	      	if ( $unit["field_unit_building_nid"]==$building["nid"] ) {
	      	
			      $out .= "\n\t<div class=\"unit\">\n\t";
			      $out .= "<a href=\"/node/".$unit["nid"]."/edit?destination=user/".$account->uid."/inbode\">".$unit["title"]."</a>&nbsp;&nbsp;";
			      $out .= $unit["field_unit_bedroom_value"]."&nbsp;bed&nbsp;&nbsp;";
			      $out .= $unit["field_unit_bathroom_value"]."&nbsp;bath&nbsp;&nbsp;";
			      $out .= "$&nbsp;".$unit["field_unit_price_amount"]."&nbsp;&nbsp;";
			      $out .= $unit["field_unit_area_value"]."&nbsp;sf.&nbsp;&nbsp;";
			      $out .= $unit["field_unit_status_value"];
			      $out .= "\n</div>";
	
	      	}
	      
	      }

      } else {
      
      	// no units
      	
      
      }
      
      // always have an "add unit"
      $out .= "<h3><a href=\"/node/add/unit?destination=user/".$account->uid."/inbode&edit[field_unit_building][nid][nid]=".$building["nid"]."\">+ Add Unit</a></h3>";

    
    }
  

  }
  
  $out .= "\n\n</div>";
  
  return $out;

}


// access
function _inbode_access($account) {
  global $user;
  
  return (
  		$user->uid == 1 ||
  		($user->uid == $account->uid && user_access('view inbode summary')) 
	  );
}


// all buildings that belong to this user
function __inbode_get_properties( $uid ) {

  $bsql = "SELECT n.nid, n.title, (SELECT count(nid) FROM content_type_unit WHERE field_unit_building_nid=n.nid) as num_units, l.street, l.additional, l.city, l.province, l.postal_code, l.country, l.latitude, l.longitude FROM node n LEFT JOIN location_instance li ON li.nid=n.nid LEFT JOIN location l ON  li.lid=l.lid WHERE n.type='building' AND n.uid=$uid ;";
  
  $usql = "SELECT n.nid, c.field_unit_building_nid, n.title, c.field_unit_bedroom_value, c.field_unit_bathroom_value, c.field_unit_price_amount, c.field_unit_area_value, c.field_unit_available_value, c.field_unit_description_value, c.field_unit_status_value FROM node n, content_type_unit c WHERE type='unit' AND uid=$uid AND n.nid=c.nid ORDER BY field_unit_building_nid; ";
  
  $bresource = db_query($bsql);
  $buildings = array();
  while ($brow = db_fetch_array($bresource)) $buildings[] = $brow;  
  
  $uresource = db_query($usql);
  $units = array();
  while ($urow = db_fetch_array($uresource)) $units[] = $urow;  

	$result = array();
	$result["buildings"]=$buildings;
	$result["units"]=$units;
	  
  return $result;  

}


// update the rowid of a unit so we know where to tie it to in fusion tables
function inbode_update_rowid( $nid, $featureid ) {
	
	if ($featureid) {
	  $sql = "UPDATE content_type_unit SET field_featureid_value='$featureid' WHERE nid=$nid; ";  
	  $resource = db_query($sql);
	  return $resource;  	
	} else {
		return 0;
	}

}



